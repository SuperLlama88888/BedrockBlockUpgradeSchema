name: Fetch upstream
on:
  schedule:
    - cron: "0 13 * * *"
  workflow_dispatch:
permissions:
  contents: write
jobs:
  update:
    name: Update
    runs-on: ubuntu-latest
    env:
      OUTPUT_FILE: schema_list.json
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        # with:
        #   token: ${{ secrets.PAT }}
      - name: Fetch upstream
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git remote add upstream https://github.com/pmmp/BedrockBlockUpgradeSchema.git
          git fetch upstream
          git rebase upstream/master
      - name: Add schema directory file
        run: |
          echo -n "[" > "$OUTPUT_FILE"
          FIRST=true
          for file in nbt_upgrade_schema/*.json; do
            filename=$(basename "$file")
            maxVersionMajor=$(jq -r '.maxVersionMajor' "$file")
            maxVersionMinor=$(jq -r '.maxVersionMinor' "$file")
            maxVersionPatch=$(jq -r '.maxVersionPatch' "$file")
            maxVersionRevision=$(jq -r '.maxVersionRevision' "$file")
            
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              echo -n "," >> "$OUTPUT_FILE"
            fi
            echo -n "{\"filename\":\"$filename\",\"maxVersionMajor\":$maxVersionMajor,\"maxVersionMinor\":$maxVersionMinor,\"maxVersionPatch\":$maxVersionPatch,\"maxVersionRevision\":$maxVersionRevision}" >> "$OUTPUT_FILE"
          done
          echo  -n "]" >> "$OUTPUT_FILE"
          jq '.' $OUTPUT_FILE > temp && mv temp $OUTPUT_FILE
          git add $OUTPUT_FILE
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
            echo "committed=false" >> "$GITHUB_ENV"
          else
            echo "Schema directory saved to $OUTPUT_FILE"
            git commit -m "Add schema directory"
            echo "committed=true" >> "$GITHUB_ENV"
          fi
      - name: Fetch and Apply New Tags
        if: env.committed == 'true'
        run: |
          # Update local tags from upstream
          git fetch upstream --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -n "$latest_tag" ]; then
            current_commit=$(git rev-parse HEAD)
            # Get the commit id pointed to by the tag, if any
            tag_commit=$(git rev-parse "$latest_tag" 2>/dev/null || echo "")
            # If the tag is not already on the latest commit, update it.
            git tag -d "$latest_tag"
            git tag "$latest_tag"
            git push origin "$latest_tag" --force
          fi
          git push origin master --force